## Project Context: Avatar Food Generator

This file provides essential context for working on the Avatar Food Generator project. Understanding these guidelines will help you make changes that are consistent with the existing architecture.

### Core Architecture

The project is built using modern JavaScript (ES Modules) and managed with Vite. Key architectural decisions include:

1.  **Relative Paths Only**: For maximum compatibility with the production build environment (Netlify), all module imports **must** use relative paths (e.g., `./`, `../`). Do not use path aliases, as they have been removed to prevent build failures.

2.  **Data-Driven Design**: All "magic strings" (like nation names or dish types) are stored as constants.
    -   **Constants File**: Before using any recurring string like "Fire Nation" or "Dessert", check if it exists in `src/core/constants.js`. If it doesn't, add it there first. This prevents typos and makes future updates easier.

3.  **Code Style**: We use Prettier to enforce a consistent code style. Before committing, always run `npm run format` to format your changes.

### How to Add a New Ingredient

Adding new ingredients is a core part of expanding this project. Follow these steps carefully:

1.  **Locate the Correct File**: Ingredient data is separated by nation. Open the relevant file in `src/core/data/`, for example `src/core/data/fireNation.js`.
2.  **Find the Nation Object**: The file contains a single exported object (e.g., `export const fireNation = { ... };`).
3.  **Find the Category**: Inside the `ingredients` property of the nation object, find the correct category array (e.g., `vegetables`, `proteins`, `spices`).
4.  **Add the Ingredient Object**: Add a new JavaScript object to the array for your ingredient. It **must** have the following structure:
    ```javascript
    {
      name: 'Your Ingredient Name', // Must be unique across all nations!
      type: 'vegetable', // The category it belongs to
      rolePreference: ['primary', 'accent'], // e.g., 'base', 'primary', 'secondary', 'seasoning', 'accent', 'garnish'
      canBeBase: false, // `true` if it can be the foundational element of a dish
      weight: 'medium', // 'light', 'medium', or 'heavy'
      rawCompatible: true, // `true` if it can be used raw
      tags: ['spicy', 'common'], // Descriptive tags for logic hooks
      rarity: 'common', // 'common', 'uncommon', 'rare', 'legendary'
      flavorNotes: ['smoky', 'fiery'], // Primary flavor descriptors
      loreHints: ['ash_yam_origin'] // (Optional) Keys for the lore generator
    }
    ```
5.  **Validate Your Changes**: After adding your ingredient(s), open the `scripts/validateData.html` file in your browser. Open the developer console (F12) and check for any errors. This will catch missing fields or duplicate names. **Do not skip this step.**

### How the Generation Works

The core generation logic is orchestrated in `src/core/dishGenerator.js`. It follows these general steps:
1.  It collects all available ingredients from the selected nations via `src/core/ingredientManager.js`.
2.  It selects a "base" ingredient, a "primary" ingredient, and several other ingredients based on roles (`seasoning`, `garnish`, etc.).
3.  It passes the selected ingredients to the `nameGenerator`, `loreGenerator`, and `descriptionGenerator` to create the final text.
4.  The result is then displayed on the page by `src/utils/domUtils.js`.

By following these guidelines, you can help keep the project clean, consistent, and easy to maintain.

### Common Pitfalls & Past Build Issues

- **Cascade of Refactoring Errors**: A recent series of runtime and build errors were caused by incomplete refactoring.
    - **Symptom 1 (`ReferenceError`)**: A function (`validateStringAndLog`) was used in `dishGenerator.js` without its corresponding import.
    - **Symptom 2 (`TypeError`)**: Legacy UI functions in `domUtils.js` were still being called from `main.js` after the HTML structure had changed, causing crashes when trying to access non-existent element IDs.
    - **Symptom 3 (Build Failure)**: A new UI function (`showLoadingState`) was called in `main.js` but had not yet been implemented or exported in `domUtils.js`.
    - **Solution**: This chain of errors highlights the importance of thorough refactoring. When changing UI or utility functions: 1) Ensure all calls have the correct imports. 2) Aggressively remove all legacy/dead code (both the functions themselves and any calls to them). 3) Verify that any newly-introduced helper functions are fully implemented and exported *before* they are used.

- **Invalid Relative Paths**: A recent build failure was caused by incorrect relative paths within the `src/core` directory. Files like `nameGenerator.js` were attempting to import from `./utils.js`, which does not exist.
    - **Symptom**: Build fails with an error like `Could not resolve './utils.js' from 'src/core/nameGenerator.js'`.
    - **Solution**: Always double-check that your relative import paths are correct. The `utils` directory is at `src/utils`, so any module inside `src/core` must import from it using `../utils/`. In the specific case of the error, the imported functions were dead code and the imports were simply removed.

- **Incorrect Import Path After Refactor**: A build failed due to an incorrect import path in `dishGenerator.js`.
    - **Symptom**: Build fails with an error like `[vite] Internal server error: Failed to resolve import "../utils/ui.js" from "src/core/dishGenerator.js"`.
    - **Solution**: The file `ui.js` did not exist. The correct import path was `../utils/domUtils.js`. This highlights the need to be extra vigilant with import paths after file renaming or refactoring.

- **Missing Module Exports (Recurring)**: The build has failed multiple times due to functions being used before they are exported. This is a common error during refactoring.
    - **Symptom**: Build fails with an error like `"functionName" is not exported by "src/path/to/module.js"`.
    - **Examples**:
        - `shuffleArray` was used but not exported from `src/utils/random.js`.
        - `hasSpecialLore` was used but not exported from `src/core/loreGenerator.js`.
    - **Solution**: When creating or moving a function for cross-module use, always add the `export` keyword immediately.

- **File I/O Anomaly**: A major refactor was blocked because a critical syntax fix (a missing comma in `airNomads.js`) could not be saved by the AI tools. The tools would report a successful write, but the file on disk would remain unchanged, leading to persistent parsing errors.
    - **Solution**: If a data-related bug seems inexplicable, manually inspect the file on disk to ensure the expected changes were actually saved.

## GOLDEN MODULE RULE

No module may exceed 12KB. REFACTOR AT ONCE IF IT OCCURS!